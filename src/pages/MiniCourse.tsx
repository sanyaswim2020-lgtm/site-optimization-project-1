import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import RutubePlayer from '@/components/RutubePlayer';

interface VideoStage {
  id: string;
  type: 'video';
  title: string;
  videos: {
    id: string;
    title: string;
    url: string; // –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ URL –Ω–∞ Rutube
    description?: string;
  }[];
  description: string;
  duration: string;
}

interface TestStage {
  id: string;
  type: 'test';
  title: string;
  questions: {
    id: string;
    question: string;
    options: string[];
    correctAnswer: number;
    explanation?: string;
  }[];
}

type CourseStage = VideoStage | TestStage;

const MiniCourse = () => {
  const { courseId } = useParams();
  const navigate = useNavigate();
  
  const [currentStage, setCurrentStage] = useState(0);
  const [isAdminMode, setIsAdminMode] = useState(false);
  const [courseData, setCourseData] = useState<CourseStage[]>([
    {
      id: '1',
      type: 'video',
      title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É',
      description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏',
      duration: '15 –º–∏–Ω',
      videos: [
        {
          id: 'v1',
          title: '–û—Å–Ω–æ–≤—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏',
          url: 'https://rutube.ru/video/example123/',
          description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'
        }
      ]
    },
    {
      id: '2',
      type: 'test',
      title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π: –û—Å–Ω–æ–≤—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏',
      questions: [
        {
          id: 'q1',
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ —á–∏—Å–ª–æ?',
          options: [
            '–ß–∏—Å–ª–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤ –∞—Ç–æ–º–µ',
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞',
            '–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞'
          ],
          correctAnswer: 1,
          explanation: '–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —á–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞ –≤ –∞—Ç–æ–º–µ. –û–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ä–±–∏—Ç–∞–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω, –∏ –µ–≥–æ —ç–Ω–µ—Ä–≥–∏—é.'
        }
      ]
    }
  ]);

  const [testAnswers, setTestAnswers] = useState<Record<string, number>>({});
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [showExplanation, setShowExplanation] = useState(false);
  const [newVideo, setNewVideo] = useState({ 
    title: '', 
    description: '', 
    duration: '',
    videos: [{ id: '1', title: '–í–∏–¥–µ–æ 1', url: '', description: '' }]
  });
  const [newTest, setNewTest] = useState({
    title: '',
    questions: [{ question: '', options: ['', '', ''], correctAnswer: 0, explanation: '' }]
  });
  const [editingStageId, setEditingStageId] = useState<string | null>(null);
  const [isSyncing, setIsSyncing] = useState(false);

  // Load data from URL parameters or localStorage on component mount
  useEffect(() => {
    if (!courseId) return;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const dataParam = urlParams.get('data');
    const stageParam = urlParams.get('stage');
    
    if (dataParam) {
      try {
        const decodedData = JSON.parse(atob(dataParam));
        setCourseData(decodedData);
        if (stageParam) {
          setCurrentStage(parseInt(stageParam));
        }
        return;
      } catch (e) {
        console.error('Error loading data from URL:', e);
      }
    }
    
    // –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
    const savedCourseData = localStorage.getItem(`minicourse-${courseId}-data`);
    const savedCurrentStage = localStorage.getItem(`minicourse-${courseId}-stage`);
    
    if (savedCourseData) {
      try {
        const parsedData = JSON.parse(savedCourseData);
        setCourseData(parsedData);
      } catch (e) {
        console.error('Error loading course data:', e);
      }
    }
    
    if (savedCurrentStage) {
      setCurrentStage(parseInt(savedCurrentStage));
    }
  }, [courseId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å –¥–∞–Ω–Ω—ã–º–∏
  const updateURLWithData = () => {
    if (!courseData || courseData.length === 0) return;
    
    try {
      const encodedData = btoa(JSON.stringify(courseData));
      const url = new URL(window.location.href);
      url.searchParams.set('data', encodedData);
      url.searchParams.set('stage', currentStage.toString());
      window.history.replaceState({}, '', url.toString());
    } catch (e) {
      console.error('Error updating URL:', e);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º URL –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —ç—Ç–∞–ø–∞
  useEffect(() => {
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
    if (courseData.length === 0) return;
    
    setIsSyncing(true);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π URL
    const timer = setTimeout(() => {
      updateURLWithData();
      setIsSyncing(false);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞)
      if (isAdminMode) {
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å URL. –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
      }
    }, 500);

    return () => {
      clearTimeout(timer);
      setIsSyncing(false);
    };
  }, [courseData, currentStage, isAdminMode]);

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
  const createBackupData = () => {
    if (!courseId) return;
    const backupData = {
      courseData,
      currentStage,
      testAnswers,
      timestamp: Date.now()
    };
    localStorage.setItem(`minicourse-${courseId}-backup`, JSON.stringify(backupData));
    console.log('Backup created:', backupData);
  };

  // Save current stage to localStorage whenever it changes
  useEffect(() => {
    if (!courseId) return;
    localStorage.setItem(`minicourse-${courseId}-stage`, currentStage.toString());
  }, [currentStage, courseId]);

  // Force video reload when stage changes


  // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞ - –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω–æ–≤–æ

  // Backup and restore functions - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é createBackupData

  const restoreFromBackup = () => {
    if (!courseId) return;
    const backupData = localStorage.getItem(`minicourse-${courseId}-backup`);
    if (backupData) {
      try {
        const backup = JSON.parse(backupData);
        setCourseData(backup.courseData || []);
        setCurrentStage(backup.currentStage || 0);
        setTestAnswers(backup.testAnswers || {});
        console.log('Restored from backup:', backup);
        return true;
      } catch (e) {
        console.error('Error restoring backup:', e);
      }
    }
    return false;
  };

  const exportCourseData = () => {
    const dataStr = JSON.stringify(courseData, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = `minicourse-${courseId}-export.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –≤–∏–¥–µ–æ
  const handleVideoUrlChange = (videoIndex: number, url: string) => {
    const updatedVideos = [...newVideo.videos];
    updatedVideos[videoIndex] = { 
      ...updatedVideos[videoIndex], 
      url: url
    };
    setNewVideo({ ...newVideo, videos: updatedVideos });
  };

  const addVideoToStage = () => {
    const newVideoId = `v${newVideo.videos.length + 1}`;
    setNewVideo({
      ...newVideo,
      videos: [...newVideo.videos, { id: newVideoId, title: `–í–∏–¥–µ–æ ${newVideo.videos.length + 1}`, url: '', description: '' }]
    });
  };

  const createVideoStage = () => {
    if (editingStageId) {
      saveEditedStage();
    } else {
      const newStage: VideoStage = {
        id: `video-${Date.now()}`,
        type: 'video',
        title: newVideo.title || '–ù–æ–≤—ã–π —ç—Ç–∞–ø',
        description: newVideo.description || '–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞',
        duration: newVideo.duration || '15 –º–∏–Ω',
        videos: newVideo.videos.filter(v => v.title.trim() !== '')
      };
      
      const updatedCourseData = [...courseData, newStage];
      setCourseData(updatedCourseData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å—Ä–∞–∑—É
      if (courseId) {
        localStorage.setItem(`minicourse-${courseId}-data`, JSON.stringify(updatedCourseData));
        createBackupData();
      }
      
      setNewVideo({ 
        title: '', 
        description: '', 
        duration: '',
        videos: [{ id: '1', title: '–í–∏–¥–µ–æ 1', url: '', description: '' }]
      });
    }
  };

  const addTestStage = () => {
    if (editingStageId) {
      saveEditedStage();
    } else {
      const newStage: TestStage = {
        id: `test-${Date.now()}`,
        type: 'test',
        title: newTest.title || '–ù–æ–≤—ã–π —Ç–µ—Å—Ç',
        questions: newTest.questions.filter(q => q.question.trim() !== '')
      };
      
      const updatedCourseData = [...courseData, newStage];
      setCourseData(updatedCourseData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å—Ä–∞–∑—É
      if (courseId) {
        localStorage.setItem(`minicourse-${courseId}-data`, JSON.stringify(updatedCourseData));
        createBackupData();
      }
      
      setNewTest({
        title: '',
        questions: [{ question: '', options: ['', '', ''], correctAnswer: 0 }]
      });
    }
  };

  const deleteStage = (stageId: string) => {
    const stageIndex = courseData.findIndex(stage => stage.id === stageId);
    if (stageIndex === -1) return;
    
    const updatedCourseData = courseData.filter(stage => stage.id !== stageId);
    setCourseData(updatedCourseData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å—Ä–∞–∑—É
    if (courseId) {
      localStorage.setItem(`minicourse-${courseId}-data`, JSON.stringify(updatedCourseData));
      createBackupData();
    }
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –∏–ª–∏ —ç—Ç–∞–ø –ø–µ—Ä–µ–¥ –Ω–∏–º, –Ω—É–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    if (stageIndex <= currentStage && updatedCourseData.length > 0) {
      setCurrentStage(Math.max(0, currentStage - 1));
    } else if (updatedCourseData.length === 0) {
      setCurrentStage(0);
    }
  };

  const clearCourseData = () => {
    if (!courseId) return;
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      localStorage.removeItem(`minicourse-${courseId}-data`);
      localStorage.removeItem(`minicourse-${courseId}-stage`);
      localStorage.removeItem(`minicourse-${courseId}-answers`);
      
      // Reset to default data
      setCourseData([
        {
          id: '1',
          type: 'video',
          title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É',
          description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏',
          duration: '15 –º–∏–Ω',
          videos: [
            {
              id: 'v1',
              title: '–û—Å–Ω–æ–≤—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏',
              url: 'https://rutube.ru/video/example123/',
              description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'
            }
          ]
        },
        {
          id: '2',
          type: 'test',
          title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π: –û—Å–Ω–æ–≤—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏',
          questions: [
            {
              id: 'q1',
              question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ —á–∏—Å–ª–æ?',
              options: [
                '–ß–∏—Å–ª–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤ –∞—Ç–æ–º–µ',
                '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞',
                '–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞'
              ],
              correctAnswer: 1,
              explanation: '–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —á–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞ –≤ –∞—Ç–æ–º–µ. –û–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ä–±–∏—Ç–∞–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω, –∏ –µ–≥–æ —ç–Ω–µ—Ä–≥–∏—é.'
            }
          ]
        }
      ]);
      setCurrentStage(0);
      setTestAnswers({});
    }
  };

  const currentStageData = courseData[currentStage];
  const progress = ((currentStage + 1) / courseData.length) * 100;

  const nextStage = () => {
    if (currentStage < courseData.length - 1) {
      setCurrentStage(currentStage + 1);
      setTestAnswers({});
      setCurrentQuestionIndex(0);
      setShowExplanation(false);
    }
  };

  const prevStage = () => {
    if (currentStage > 0) {
      setCurrentStage(currentStage - 1);
      setTestAnswers({});
      setCurrentQuestionIndex(0);
      setShowExplanation(false);
    }
  };

  const handleAnswerQuestion = () => {
    if (currentStageData && currentStageData.type === 'test') {
      const currentQuestion = currentStageData.questions[currentQuestionIndex];
      if (testAnswers[currentQuestion.id] !== undefined) {
        setShowExplanation(true);
      }
    }
  };

  const nextQuestion = () => {
    if (currentStageData && currentStageData.type === 'test') {
      if (currentQuestionIndex < currentStageData.questions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1);
        setShowExplanation(false);
      }
    }
  };

  const prevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setShowExplanation(false);
    }
  };

  const addQuestionToTest = () => {
    setNewTest({
      ...newTest,
      questions: [...newTest.questions, { question: '', options: ['', '', ''], correctAnswer: 0, explanation: '' }]
    });
  };

  const addOptionToQuestion = (questionIndex: number) => {
    const updatedQuestions = [...newTest.questions];
    updatedQuestions[questionIndex].options.push('');
    setNewTest({ ...newTest, questions: updatedQuestions });
  };

  const removeOptionFromQuestion = (questionIndex: number, optionIndex: number) => {
    const updatedQuestions = [...newTest.questions];
    if (updatedQuestions[questionIndex].options.length > 2) { // –ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
      updatedQuestions[questionIndex].options.splice(optionIndex, 1);
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π
      if (updatedQuestions[questionIndex].correctAnswer >= updatedQuestions[questionIndex].options.length) {
        updatedQuestions[questionIndex].correctAnswer = 0;
      }
      setNewTest({ ...newTest, questions: updatedQuestions });
    }
  };

  const removeQuestion = (questionIndex: number) => {
    const updatedQuestions = newTest.questions.filter((_, index) => index !== questionIndex);
    setNewTest({ ...newTest, questions: updatedQuestions });
  };

  const moveStage = (fromIndex: number, toIndex: number) => {
    if (toIndex < 0 || toIndex >= courseData.length) return;
    
    const updatedCourseData = [...courseData];
    const [movedStage] = updatedCourseData.splice(fromIndex, 1);
    updatedCourseData.splice(toIndex, 0, movedStage);
    setCourseData(updatedCourseData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (currentStage === fromIndex) {
      setCurrentStage(toIndex);
    } else if (currentStage === toIndex) {
      setCurrentStage(fromIndex);
    } else if (fromIndex < currentStage && toIndex >= currentStage) {
      setCurrentStage(currentStage - 1);
    } else if (fromIndex > currentStage && toIndex <= currentStage) {
      setCurrentStage(currentStage + 1);
    }
  };

  const editStage = (stage: VideoStage | TestStage) => {
    if (stage.type === 'video') {
      setNewVideo({
        title: stage.title,
        description: stage.description,
        duration: stage.duration,
        videos: stage.videos
      });
      setEditingStageId(stage.id);
    } else {
      setNewTest({
        title: stage.title,
        questions: stage.questions
      });
      setEditingStageId(stage.id);
    }
  };

  const saveEditedStage = () => {
    if (!editingStageId) return;
    
    const stageIndex = courseData.findIndex(stage => stage.id === editingStageId);
    if (stageIndex === -1) return;
    
    const updatedCourseData = [...courseData];
    const existingStage = updatedCourseData[stageIndex];
    
    if (existingStage.type === 'video') {
      updatedCourseData[stageIndex] = {
        ...existingStage,
        title: newVideo.title || existingStage.title,
        description: newVideo.description || existingStage.description,
        duration: newVideo.duration || existingStage.duration,
        videos: newVideo.videos.filter(v => v.title.trim() !== '')
      };
      setNewVideo({ 
        title: '', 
        description: '', 
        duration: '',
        videos: [{ id: '1', title: '–í–∏–¥–µ–æ 1', url: '', description: '' }]
      });
    } else {
      updatedCourseData[stageIndex] = {
        ...existingStage,
        title: newTest.title || existingStage.title,
        questions: newTest.questions.filter(q => q.question.trim() !== '')
      };
      setNewTest({
        title: '',
        questions: [{ question: '', options: ['', '', ''], correctAnswer: 0 }]
      });
    }
    
    setCourseData(updatedCourseData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å—Ä–∞–∑—É
    if (courseId) {
      localStorage.setItem(`minicourse-${courseId}-data`, JSON.stringify(updatedCourseData));
      createBackupData();
    }
    
    setEditingStageId(null);
  };

  const cancelEdit = () => {
    setEditingStageId(null);
    setNewVideo({ 
      title: '', 
      description: '', 
      duration: '',
      videos: [{ id: '1', title: '–í–∏–¥–µ–æ 1', url: '', description: '' }]
    });
    setNewTest({
      title: '',
      questions: [{ question: '', options: ['', '', ''], correctAnswer: 0 }]
    });
  };

  if (!currentStageData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="p-8 text-center">
            <Icon name="AlertCircle" size={48} className="mx-auto mb-4 text-gray-400" />
            <h2 className="text-xl font-semibold mb-2">–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
            <p className="text-gray-600 mb-4">–¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
            <Button onClick={() => navigate('/')}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen bg-gray-50 relative"
      style={{
        backgroundImage: 'url(https://cdn.poehali.dev/files/9fe0ef78-b574-42b7-8ed4-2e886b56d5d8.jpeg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}
    >
      {/* Background overlay */}
      <div className="absolute inset-0 bg-black bg-opacity-20"></div>
      
      {/* Content wrapper */}
      <div className="relative z-10">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              <Button variant="ghost" size="sm" onClick={() => navigate('/')}>
                <Icon name="ArrowLeft" size={18} className="mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <div className="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Icon name="Zap" size={18} className="text-white" />
              </div>
              <h1 className="text-xl font-bold text-gray-900">–ö–≤–∞–Ω—Ç–æ–≤—ã–π —Å–∫–∞—á–æ–∫</h1>
            </div>
            
            <div className="flex items-center space-x-4">
              {isSyncing && (
                <div className="flex items-center space-x-2 px-3 py-1 bg-blue-50 rounded-full">
                  <Icon name="Loader2" size={14} className="animate-spin text-blue-600" />
                  <span className="text-xs text-blue-600">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...</span>
                </div>
              )}
              <Button
                variant={isAdminMode ? "default" : "outline"}
                size="sm"
                onClick={() => setIsAdminMode(!isAdminMode)}
              >
                <Icon name="Settings" size={16} className="mr-2" />
                {isAdminMode ? '–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞' : '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Progress */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium text-gray-700">
              –≠—Ç–∞–ø {currentStage + 1} –∏–∑ {courseData.length}
            </span>
            <span className="text-sm text-gray-500">{Math.round(progress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {isAdminMode ? (
          <Tabs defaultValue="content" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="content">–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</TabsTrigger>
              <TabsTrigger value="admin">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º</TabsTrigger>
            </TabsList>
            
            <TabsContent value="content">
              {/* Content display - same as view mode */}
              {currentStageData.type === 'video' ? (
                <Card>
                  <CardHeader>
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                        <Icon name="Play" size={20} className="text-red-600" />
                      </div>
                      <div>
                        <CardTitle>{currentStageData.title}</CardTitle>
                        <p className="text-sm text-gray-600">{currentStageData.duration}</p>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {currentStageData.videos.map((video, index) => (
                        <div key={video.id} className="border rounded-lg p-4">
                          <h3 className="font-semibold mb-3">{video.title}</h3>
                          <div className="mb-4">
                            {video.url ? (
                              <RutubePlayer 
                                url={video.url}
                                title={video.title}
                                className="rounded-lg"
                              />
                            ) : (
                              <div className="w-full h-48 bg-gray-100 border border-gray-200 rounded-lg flex items-center justify-center">
                                <div className="text-center">
                                  <Icon name="Video" size={32} className="mx-auto mb-2 text-gray-400" />
                                  <p className="text-sm text-gray-600 font-medium">URL –≤–∏–¥–µ–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω</p>
                                  <p className="text-xs text-gray-500 mt-1">–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Rutube –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                                </div>
                              </div>
                            )}
                          </div>
                          
                          {video.description && (
                            <div className="mt-3">
                              <p className="text-sm text-gray-600">{video.description}</p>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                    <p className="text-gray-700">{currentStageData.description}</p>
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                          <Icon name="HelpCircle" size={20} className="text-blue-600" />
                        </div>
                        <div>
                          <CardTitle>{currentStageData.title}</CardTitle>
                          <p className="text-sm text-gray-600">
                            –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞ (–í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {currentStageData.questions.length})
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={prevQuestion}
                          disabled={currentQuestionIndex === 0}
                        >
                          <Icon name="ChevronLeft" size={16} />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={nextQuestion}
                          disabled={currentQuestionIndex === currentStageData.questions.length - 1}
                        >
                          <Icon name="ChevronRight" size={16} />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    {(() => {
                      const currentQuestion = currentStageData.questions[currentQuestionIndex];
                      if (!currentQuestion) return null;
                      
                      return (
                        <div className="space-y-4">
                          <h3 className="text-lg font-semibold">{currentQuestion.question}</h3>
                          
                          <div className="space-y-3">
                            {currentQuestion.options.map((option, optionIndex) => (
                              <label 
                                key={optionIndex} 
                                className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-colors ${
                                  optionIndex === currentQuestion.correctAnswer
                                    ? 'bg-green-50 border-green-300'
                                    : 'hover:bg-gray-50 border-gray-200'
                                }`}
                              >
                                <input
                                  type="radio"
                                  name={`admin-question-${currentQuestion.id}`}
                                  value={optionIndex}
                                  checked={optionIndex === currentQuestion.correctAnswer}
                                  readOnly
                                  className="text-green-600"
                                />
                                <span className="flex-1">{option}</span>
                                {optionIndex === currentQuestion.correctAnswer && (
                                  <Icon name="Check" size={16} className="text-green-600" />
                                )}
                              </label>
                            ))}
                          </div>
                          
                          {/* Show explanation in admin preview if exists */}
                          {currentQuestion.explanation && (
                            <div className="mt-4 p-4 rounded-lg bg-blue-50 border-l-4 border-blue-300">
                              <div className="flex items-center space-x-2 mb-2">
                                <Icon name="Info" size={16} className="text-blue-600" />
                                <span className="text-sm font-medium text-blue-700">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</span>
                              </div>
                              <div className="text-sm text-gray-700">{currentQuestion.explanation}</div>
                            </div>
                          )}
                        </div>
                      );
                    })()}
                  </CardContent>
                </Card>
              )}
            </TabsContent>
            
            <TabsContent value="admin">
              <div className="space-y-6">
                {/* Add Video Stage */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <Icon name="Video" size={20} />
                        <span>{editingStageId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø —Å –≤–∏–¥–µ–æ' : '–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø —Å –≤–∏–¥–µ–æ'}</span>
                      </div>
                      {editingStageId && (
                        <Button onClick={cancelEdit} variant="outline" size="sm">
                          <Icon name="X" size={14} className="mr-1" />
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="stage-title">–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞</Label>
                      <Input
                        id="stage-title"
                        value={newVideo.title}
                        onChange={(e) => setNewVideo({ ...newVideo, title: e.target.value })}
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"
                      />
                    </div>
                    <div>
                      <Label htmlFor="stage-description">–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞</Label>
                      <Textarea
                        id="stage-description"
                        value={newVideo.description}
                        onChange={(e) => setNewVideo({ ...newVideo, description: e.target.value })}
                        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"
                      />
                    </div>
                    <div>
                      <Label htmlFor="stage-duration">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</Label>
                      <Input
                        id="stage-duration"
                        value={newVideo.duration}
                        onChange={(e) => setNewVideo({ ...newVideo, duration: e.target.value })}
                        placeholder="15 –º–∏–Ω"
                      />
                    </div>

                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Label>–í–∏–¥–µ–æ –≤ —ç—Ç–∞–ø–µ</Label>
                        <Button onClick={addVideoToStage} variant="outline" size="sm">
                          <Icon name="Plus" size={16} className="mr-2" />
                          –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
                        </Button>
                      </div>

                      {newVideo.videos.map((video, index) => (
                        <div key={video.id} className="border rounded-lg p-4 space-y-3">
                          <div>
                            <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {index + 1}</Label>
                            <textarea
                              value={video.title}
                              onChange={(e) => {
                                const updatedVideos = [...newVideo.videos];
                                updatedVideos[index].title = e.target.value;
                                setNewVideo({ ...newVideo, videos: updatedVideos });
                              }}
                              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"
                              className="w-full min-h-[60px] p-3 border border-gray-300 rounded-md resize-y focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              rows={2}
                            />
                          </div>
                          
                          <div>
                            <Label>URL –≤–∏–¥–µ–æ –Ω–∞ Rutube</Label>
                            <Input
                              type="url"
                              value={video.url}
                              onChange={(e) => handleVideoUrlChange(index, e.target.value)}
                              placeholder="https://rutube.ru/video/..."
                              className="w-full"
                            />
                            {video.url && (
                              <div className="mt-2">
                                <p className="text-sm text-green-600">‚úì URL –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω</p>
                              </div>
                            )}
                          </div>

                          <div>
                            <Label>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                            <Textarea
                              value={video.description || ''}
                              onChange={(e) => {
                                const updatedVideos = [...newVideo.videos];
                                updatedVideos[index] = { 
                                  ...updatedVideos[index], 
                                  description: e.target.value
                                };
                                setNewVideo({ ...newVideo, videos: updatedVideos });
                              }}
                              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ..."
                              className="min-h-[60px]"
                            />
                          </div>
                        </div>
                      ))}
                    </div>

                    <Button onClick={createVideoStage} className="w-full">
                      <Icon name="Save" size={16} className="mr-2" />
                      {editingStageId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ø'}
                    </Button>
                  </CardContent>
                </Card>

                {/* Add Test */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <Icon name="HelpCircle" size={20} />
                        <span>{editingStageId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç'}</span>
                      </div>
                      {editingStageId && (
                        <Button onClick={cancelEdit} variant="outline" size="sm">
                          <Icon name="X" size={14} className="mr-1" />
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="test-title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</Label>
                      <textarea
                        id="test-title"
                        value={newTest.title}
                        onChange={(e) => setNewTest({ ...newTest, title: e.target.value })}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"
                        className="w-full min-h-[60px] p-3 border border-gray-300 rounded-md resize-y focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        rows={2}
                      />
                    </div>
                    
                    {newTest.questions.map((question, questionIndex) => (
                      <div key={questionIndex} className="border rounded-lg p-4 space-y-3">
                        <div>
                          <Label>–í–æ–ø—Ä–æ—Å {questionIndex + 1}</Label>
                          <textarea
                            value={question.question}
                            onChange={(e) => {
                              const updatedQuestions = [...newTest.questions];
                              updatedQuestions[questionIndex].question = e.target.value;
                              setNewTest({ ...newTest, questions: updatedQuestions });
                            }}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"
                            className="w-full min-h-[80px] p-3 border border-gray-300 rounded-md resize-y focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            rows={3}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <Label className="text-sm font-medium">–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</Label>
                            <div className="flex space-x-2">
                              <Button
                                onClick={() => addOptionToQuestion(questionIndex)}
                                variant="outline"
                                size="sm"
                                className="text-xs"
                              >
                                <Icon name="Plus" size={12} className="mr-1" />
                                –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
                              </Button>
                              <Button
                                onClick={() => removeQuestion(questionIndex)}
                                variant="destructive"
                                size="sm"
                                className="text-xs"
                              >
                                <Icon name="Trash2" size={12} className="mr-1" />
                                –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                              </Button>
                            </div>
                          </div>
                          
                          {question.options.map((option, optionIndex) => (
                            <div key={optionIndex} className="flex items-center space-x-2 p-2 border rounded-md bg-gray-50">
                              <input
                                type="radio"
                                name={`correct-${questionIndex}`}
                                checked={question.correctAnswer === optionIndex}
                                onChange={() => {
                                  const updatedQuestions = [...newTest.questions];
                                  updatedQuestions[questionIndex].correctAnswer = optionIndex;
                                  setNewTest({ ...newTest, questions: updatedQuestions });
                                }}
                                className="w-4 h-4 text-blue-600"
                              />
                              <Input
                                value={option}
                                onChange={(e) => {
                                  const updatedQuestions = [...newTest.questions];
                                  updatedQuestions[questionIndex].options[optionIndex] = e.target.value;
                                  setNewTest({ ...newTest, questions: updatedQuestions });
                                }}
                                placeholder={`–í–∞—Ä–∏–∞–Ω—Ç ${optionIndex + 1}`}
                                className="flex-1"
                              />
                              {question.options.length > 2 && (
                                <Button
                                  onClick={() => removeOptionFromQuestion(questionIndex, optionIndex)}
                                  variant="ghost"
                                  size="sm"
                                  className="text-red-500 hover:text-red-700 hover:bg-red-50"
                                >
                                  <Icon name="X" size={16} />
                                </Button>
                              )}
                            </div>
                          ))}
                          
                          <div className="text-xs text-gray-500 mt-2">
                            <Icon name="Info" size={12} className="inline mr-1" />
                            –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–º–µ—Ç–∏–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É
                          </div>
                        </div>
                        
                        {/* Explanation field */}
                        <div>
                          <Label className="text-sm font-medium">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                          <Textarea
                            value={question.explanation || ''}
                            onChange={(e) => {
                              const updatedQuestions = [...newTest.questions];
                              updatedQuestions[questionIndex].explanation = e.target.value;
                              setNewTest({ ...newTest, questions: updatedQuestions });
                            }}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                            className="min-h-[60px] resize-y"
                            rows={2}
                          />
                        </div>
                      </div>
                    ))}
                    
                    <div className="flex space-x-2">
                      <Button onClick={addQuestionToTest} variant="outline" className="flex-1">
                        <Icon name="Plus" size={16} className="mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                      </Button>
                      <Button onClick={addTestStage} className="flex-1">
                        {editingStageId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç'}
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Existing Stages Management */}
                {courseData.length > 0 && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Icon name="List" size={20} />
                        <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ –∫—É—Ä—Å–∞</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {courseData.map((stage, index) => (
                          <div key={stage.id} className="flex items-center justify-between p-4 border rounded-lg bg-gray-50">
                            <div className="flex items-center space-x-3">
                              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${
                                stage.type === 'video' 
                                  ? 'bg-red-100 text-red-600' 
                                  : 'bg-blue-100 text-blue-600'
                              }`}>
                                <Icon name={stage.type === 'video' ? 'Play' : 'HelpCircle'} size={16} />
                              </div>
                              <div>
                                <p className="font-medium text-sm">
                                  –≠—Ç–∞–ø {index + 1}: {stage.title}
                                </p>
                                <p className="text-xs text-gray-500">
                                  {stage.type === 'video' 
                                    ? `–í–∏–¥–µ–æ ‚Ä¢ ${(stage as VideoStage).duration || '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}` 
                                    : `–¢–µ—Å—Ç ‚Ä¢ ${(stage as TestStage).questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`
                                  }
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Badge variant={index === currentStage ? 'default' : 'outline'} className="text-xs">
                                {index === currentStage ? '–¢–µ–∫—É—â–∏–π' : `–≠—Ç–∞–ø ${index + 1}`}
                              </Badge>
                              
                              {/* Move Up/Down */}
                              <div className="flex flex-col">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => moveStage(index, index - 1)}
                                  disabled={index === 0}
                                  className="h-5 w-6 p-0 text-gray-400 hover:text-blue-600"
                                  title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                                >
                                  <Icon name="ChevronUp" size={12} />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => moveStage(index, index + 1)}
                                  disabled={index === courseData.length - 1}
                                  className="h-5 w-6 p-0 text-gray-400 hover:text-blue-600"
                                  title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                                >
                                  <Icon name="ChevronDown" size={12} />
                                </Button>
                              </div>

                              {/* Edit Button */}
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => editStage(stage)}
                                className="text-gray-600 hover:text-green-600"
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø"
                              >
                                <Icon name="Edit" size={14} />
                              </Button>
                              
                              {/* View Button */}
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setCurrentStage(index)}
                                className="text-gray-600 hover:text-blue-600"
                                title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É"
                              >
                                <Icon name="Eye" size={14} />
                              </Button>
                              
                              {/* Delete Button */}
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => {
                                  if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø "${stage.title}"?`)) {
                                    deleteStage(stage.id);
                                  }
                                }}
                                className="text-red-500 hover:text-red-700 hover:bg-red-50"
                                title="–£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø"
                              >
                                <Icon name="Trash2" size={14} />
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                      
                      {courseData.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                          <Icon name="BookOpen" size={32} className="mx-auto mb-2 opacity-50" />
                          <p>–í –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —ç—Ç–∞–ø–æ–≤</p>
                          <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Å –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ—Å—Ç–æ–º</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {/* Course Data Management */}
                <Card className="border-red-200">
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2 text-red-700">
                      <Icon name="AlertTriangle" size={20} />
                      <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="p-4 bg-amber-50 border border-amber-200 rounded-lg">
                        <div className="flex items-start space-x-3">
                          <Icon name="Info" size={16} className="text-amber-600 mt-0.5" />
                          <div className="text-sm text-amber-800">
                            <p className="font-medium mb-1">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</p>
                            <p>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞, —Ç–µ–∫—Å—Ç—ã –∏ <strong>–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ</strong> —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ö—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.</p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Backup and Restore Section */}
                      <div className="space-y-3">
                        <div className="flex items-center justify-between p-4 border border-blue-200 rounded-lg bg-blue-50">
                          <div>
                            <h4 className="font-medium text-blue-800">–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                            <p className="text-sm text-blue-600 mt-1">
                              –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
                            </p>
                          </div>
                          <div className="flex space-x-2">
                            <Button
                              onClick={createBackupData}
                              variant="outline"
                              size="sm"
                              className="border-blue-300 text-blue-700 hover:bg-blue-100"
                            >
                              <Icon name="Save" size={16} className="mr-2" />
                              –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é
                            </Button>
                            <Button
                              onClick={() => {
                                if (restoreFromBackup()) {
                                  alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!');
                                } else {
                                  alert('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                                }
                              }}
                              variant="outline" 
                              size="sm"
                              className="border-blue-300 text-blue-700 hover:bg-blue-100"
                            >
                              <Icon name="RotateCcw" size={16} className="mr-2" />
                              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                            </Button>
                          </div>
                        </div>
                        
                        <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg bg-purple-50">
                          <div>
                            <h4 className="font-medium text-purple-800">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫—É—Ä—Å–æ–º</h4>
                            <p className="text-sm text-purple-600 mt-1">
                              –°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö. –ö–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                            </p>
                          </div>
                          <Button
                            onClick={() => {
                              updateURLWithData();
                              navigator.clipboard.writeText(window.location.href).then(() => {
                                alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –∫—É—Ä—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
                              }).catch(() => {
                                alert('–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
                              });
                            }}
                            variant="outline"
                            size="sm"
                            className="border-purple-300 text-purple-700 hover:bg-purple-100"
                          >
                            <Icon name="Share2" size={16} className="mr-2" />
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                          </Button>
                        </div>
                        
                        <div className="flex items-center justify-between p-4 border border-green-200 rounded-lg bg-green-50">
                          <div>
                            <h4 className="font-medium text-green-800">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h4>
                            <p className="text-sm text-green-600 mt-1">
                              –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –≤ —Ñ–∞–π–ª JSON
                            </p>
                          </div>
                          <Button
                            onClick={exportCourseData}
                            variant="outline"
                            size="sm"
                            className="border-green-300 text-green-700 hover:bg-green-100"
                          >
                            <Icon name="Download" size={16} className="mr-2" />
                            –≠–∫—Å–ø–æ—Ä—Ç
                          </Button>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between p-4 border border-red-200 rounded-lg bg-red-50">
                        <div>
                          <h4 className="font-medium text-red-800">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞</h4>
                          <p className="text-sm text-red-600 mt-1">
                            –£–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã, —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.
                          </p>
                        </div>
                        <Button
                          onClick={clearCourseData}
                          variant="destructive"
                          size="sm"
                          className="ml-4"
                        >
                          <Icon name="Trash2" size={16} className="mr-2" />
                          –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        ) : (
          // View Mode
          <>
            {currentStageData.type === 'video' ? (
              <Card>
                <CardHeader>
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                      <Icon name="Play" size={20} className="text-red-600" />
                    </div>
                    <div>
                      <CardTitle>{currentStageData.title}</CardTitle>
                      <p className="text-sm text-gray-600">{currentStageData.duration}</p>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {currentStageData.videos.map((video, index) => (
                      <div key={video.id} className="border rounded-lg p-4">
                        <h3 className="font-semibold mb-3">{video.title}</h3>
                        <div className="mb-4">
                          {video.url ? (
                            <RutubePlayer 
                              url={video.url}
                              title={video.title}
                              className="w-full rounded-lg"
                            />
                          ) : (
                            <div className="w-full h-48 bg-gray-100 rounded-lg flex items-center justify-center">
                              <div className="text-center">
                                <Icon name="Video" size={32} className="mx-auto mb-2 text-gray-400" />
                                <p className="text-sm text-gray-500">–í–∏–¥–µ–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</p>
                              </div>
                            </div>
                          )}
                        </div>
                        
                        {video.description && (
                          <div className="mt-3">
                            <p className="text-sm text-gray-600">{video.description}</p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                  <p className="text-gray-700">{currentStageData.description}</p>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <Icon name="HelpCircle" size={20} className="text-blue-600" />
                      </div>
                      <div>
                        <CardTitle>{currentStageData.title}</CardTitle>
                        <p className="text-sm text-gray-600">
                          –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {currentStageData.questions.length}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={prevQuestion}
                        disabled={currentQuestionIndex === 0}
                      >
                        <Icon name="ChevronLeft" size={16} />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={nextQuestion}
                        disabled={currentQuestionIndex === currentStageData.questions.length - 1}
                      >
                        <Icon name="ChevronRight" size={16} />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  {(() => {
                    const currentQuestion = currentStageData.questions[currentQuestionIndex];
                    if (!currentQuestion) return null;
                    
                    return (
                      <div className="space-y-4">
                        <h3 className="text-lg font-semibold">{currentQuestion.question}</h3>
                        
                        <div className="space-y-3">
                          {currentQuestion.options.map((option, optionIndex) => (
                            <label 
                              key={optionIndex} 
                              className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-colors ${
                                testAnswers[currentQuestion.id] === optionIndex 
                                  ? 'bg-blue-50 border-blue-300' 
                                  : 'hover:bg-gray-50 border-gray-200'
                              }`}
                            >
                              <input
                                type="radio"
                                name={`question-${currentQuestion.id}`}
                                value={optionIndex}
                                checked={testAnswers[currentQuestion.id] === optionIndex}
                                onChange={() => setTestAnswers({ ...testAnswers, [currentQuestion.id]: optionIndex })}
                                className="text-blue-600"
                                disabled={showExplanation}
                              />
                              <span className="flex-1">{option}</span>
                            </label>
                          ))}
                        </div>
                        
                        {!showExplanation ? (
                          <Button
                            onClick={handleAnswerQuestion}
                            disabled={testAnswers[currentQuestion.id] === undefined}
                            className="w-full"
                          >
                            –û—Ç–≤–µ—Ç–∏—Ç—å
                          </Button>
                        ) : (
                          <div className="space-y-4">
                            {/* Show result */}
                            <div className={`p-4 rounded-lg border-l-4 ${
                              testAnswers[currentQuestion.id] === currentQuestion.correctAnswer
                                ? 'bg-green-50 border-green-400'
                                : 'bg-red-50 border-red-400'
                            }`}>
                              <div className="flex items-center space-x-2 mb-2">
                                <Icon 
                                  name={testAnswers[currentQuestion.id] === currentQuestion.correctAnswer ? "CheckCircle" : "XCircle"} 
                                  size={16} 
                                  className={testAnswers[currentQuestion.id] === currentQuestion.correctAnswer ? "text-green-600" : "text-red-600"} 
                                />
                                <span className={`font-medium ${
                                  testAnswers[currentQuestion.id] === currentQuestion.correctAnswer ? "text-green-700" : "text-red-700"
                                }`}>
                                  {testAnswers[currentQuestion.id] === currentQuestion.correctAnswer ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" : "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"}
                                </span>
                              </div>
                              
                              {testAnswers[currentQuestion.id] !== currentQuestion.correctAnswer && (
                                <p className="text-sm text-red-700 mb-2">
                                  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.options[currentQuestion.correctAnswer]}
                                </p>
                              )}
                              
                              {currentQuestion.explanation && (
                                <div className="text-sm text-gray-700">
                                  <strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> {currentQuestion.explanation}
                                </div>
                              )}
                            </div>
                            
                            {/* Navigation buttons */}
                            <div className="flex space-x-2">
                              {currentQuestionIndex < currentStageData.questions.length - 1 ? (
                                <Button onClick={nextQuestion} className="flex-1">
                                  –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                                  <Icon name="ArrowRight" size={16} className="ml-2" />
                                </Button>
                              ) : (
                                <Button onClick={nextStage} disabled={currentStage === courseData.length - 1} className="flex-1">
                                  –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
                                  <Icon name="CheckCircle" size={16} className="ml-2" />
                                </Button>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })()}
                </CardContent>
              </Card>
            )}
          </>
        )}

        {/* Navigation */}
        <div className="flex justify-between items-center mt-8">
          <Button
            variant="outline"
            onClick={prevStage}
            disabled={currentStage === 0}
          >
            <Icon name="ChevronLeft" size={16} className="mr-2" />
            –ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç—Ç–∞–ø—É
          </Button>
          
          <Badge variant="outline">
            {currentStageData.type === 'video' ? '–í–∏–¥–µ–æ' : '–¢–µ—Å—Ç'}
          </Badge>
          
          <Button
            onClick={nextStage}
            disabled={currentStage === courseData.length - 1}
          >
            –ö —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            <Icon name="ChevronRight" size={16} className="ml-2" />
          </Button>
        </div>
      </div>
      </div>
    </div>
  );
};

export default MiniCourse;